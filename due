#!/usr/bin/env python

import os
import sys
import re
import getopt
from datetime import *
import dateutil.parser
from dateutil.relativedelta import *

TODO_SH=os.environ['TODO_FULL_SH']
TODO_TXT=os.environ['TODO_FILE']
DATE_PAT=re.compile(r"d:(\d{4})-(\d{2})-(\d{2})")

def find_item_text(item):
	"""Find the text of the todo.txt line with number 'item'."""
	i = 0
	text = ""
	fh = open(TODO_TXT, 'r')
	for line in fh:
		i += 1
		if i == int(item):
			text = line.strip()
			break
	return text


def clear_metadata(text):
	"""Remove the line number, priority and other metadata from a todo line."""
	text = re.sub('^[0-9]* ', '', text)   # remove line number
	text = re.sub('^\([A-Z]\)* ', '', text) # remove priority
	text = text.strip()
	return text


def	parsedate(text):
	"""Take a textual representation of a string and turn it into a date() object."""
	if text == 'today':
		d=date.today()
	elif text == 'tomorrow':
		d=date.today()+relativedelta(days=+1)
	elif text == 'yesterday':
		d=date.today()+relativedelta(days=-1)
	else:
		d=dateutil.parser.parse(text, fuzzy=True).date()
	return d


def list(args, due="today"):
	due=parsedate(due)
	command = TODO_SH+' ls '+' '.join(args)
	p = os.popen(command, 'r')
	for line in p:
		line=line.strip()
		match = re.search(DATE_PAT, line)
		if match:
			m = match.groups()
			d = date(int(m[0]), int(m[1]), int(m[2]))
			if ( d <= due ):
				print line.rstrip()
	p.close()


def set(item, date):
	date = str(parsedate(date))
	text = find_item_text(item)

	# 
	if re.search(DATE_PAT, text):
		text = re.sub(DATE_PAT, '', text)
		text = clear_metadata(text)
		command = TODO_SH+' replace '+item+' "'+text+'" d:'+date
	else:
		command = TODO_SH+" append "+item+" d:"+date
	
	#
	return not os.system(command)


def unset(item):
	text = find_item_text(item)

	if re.search(DATE_PATH, text):
		text = re.sub(DATE_PAT, '', text)
		text = clear_metadata(text)
		command = TODO_SH+' replace '+item+' "'+text+'" d:'+date
		return not os.system(command)
	return True


def usage():
	print """  due <COMMAND> ARGS
      Manage the due dates for commands.

      due list [-d <DUE_DATE>] ...
      due set <#ITEM> <DUE_DATE> 
      due unset <#ITEM>
"""

if __name__ == "__main__":
	command=""
	if (len(sys.argv) == 2): command=sys.argv[1]
	if (len(sys.argv) > 2): command=sys.argv[2]
	args = sys.argv[3:]
	#print "command="+command
	#print "args="+','.join(args)

	duedate="today"
	opts,args = getopt.getopt(args, 'd:')
	for o, a in opts:
		if o == '-d':
			duedate = a

	if command == 'usage':
		usage()
	elif command == "":
		list([], "today")
	elif command == 'list' or command == 'ls':
		list(args, duedate)
	elif command == 'set':
		if len(args) != 2:
			usage()
			sys.exit(1)
		set(args[0], args[1])
	

