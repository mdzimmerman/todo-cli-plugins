#!/usr/bin/env python

import os
import sys
import re
from datetime import *
import dateutil.parser
from dateutil.relativedelta import *

TODO_SH=os.environ['TODO_FULL_SH']
TODO_TXT=os.environ['TODO_FILE']
DATE_PAT=re.compile(r"d:(\d{4})-(\d{2})-(\d{2})")

def	parsedate(text):
	if text == 'today':
		d=date.today()
	elif text == 'tomorrow':
		d=date.today()+relativedelta(days=+1)
	elif text == 'yesterday':
		d=date.today()+relativedelta(days=-1)
	else:
		d=dateutil.parser.parse(text, fuzzy=True).date()

	return d


def list(args, due=date.today()):
	command = TODO_SH+' ls '+' '.join(args)
	p = os.popen(command, 'r')
	for line in p:
		line=line.strip()
		match = re.search(DATE_PAT, line)
		if match:
			m = match.groups()
			d = date(int(m[0]), int(m[1]), int(m[2]))
			if ( d <= due ):
				print line.rstrip()
	p.close()


def set(item, date):
	date = str(parsedate(date))
	
	#
	i = 0
	text = ""
	fh = open(TODO_TXT, 'r')
	for line in fh:
		i += 1
		if i == int(item):
			text = line.strip()

	# 
	if re.search(DATE_PAT, text):
		text = re.sub(DATE_PAT, '', text)
		text = re.sub('^[0-9]* ', '', text)   # remove line number
		text = re.sub('^\([A-Z]\)* ', '', text) # remove priority
		text = text.strip()
		command = TODO_SH+' replace '+item+' "'+text+'" d:'+date
	else:
		command = TODO_SH+" append "+item+" d:"+date
	
	#
	return not os.system(command)


def unset(item):
	i = 0
	text = ""
	fh = open(TODO_TXT, 'r')
	for line in fh:
		i += 1
		if i == int(item):
			text = line.strip()

	if re.search(DATE_PATH, text):
		text = re.sub(DATE_PAT, '', text)
		text = re.sub('^[0-9]* ', '', text)   # remove line number
		text = re.sub('^\([A-Z]\)* ', '', text) # remove priority
		text = text.strip()
		command = TODO_SH+' replace '+item+' "'+text+'" d:'+date
		return not os.system(command)
	return True


def usage():
	print """
 due COMMAND ARGS
     
     due list ARGS_FOR_LIST
     due set #ITEM DUE_DATE 
     due unset #ITEM
"""

if __name__ == "__main__":
	command=""
	if (len(sys.argv) > 2): command=sys.argv[2]
	args = sys.argv[3:]
	#print "command="+command
	#print "args="+','.join(args)

	if command == 'usage':
		usage()
	elif command == "":
		list([])
	elif command == 'list' or command == 'ls':
		list(args)
	elif command == 'set':
		if len(args) != 2:
			usage()
			sys.exit(1)
		set(args[0], args[1])
	

